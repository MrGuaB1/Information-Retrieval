256a fall 2011 hw1 ccrma wiki 256a fall 2011 hw1 from ccrma wiki jump to navigation search contents 1 homework 1 real time audio buffers and waveforms 1.1 specification part 1 of 3 real time audio 1.2 specification part 2 of 3 waveforms 1.3 specification part 3 of 3 one ring to modulate them all 1.4 note 1.5 testing audio output 1.6 deliverables homework 1 real time audio buffers and waveforms due date 2011.10 05 11 59 59pm or thereabout wednesday image ingredients jpg let's get cookin specification part 1 of 3 real time audio create a program that is capable of real time audio input output give it name eg sig gen creative names are always welcome start with a blank c++ program create a minimally compilable program eg something like helloworld if you d like you can start with this very basic makefile will need to make changes for a simple introduction to make files check out this link next add real time audio support using the rtaudio library version 4.0 4 download it from hellosine above or get the most recent and potentially different version here even though it's useful to briefly look through the package the only files you ll need are rtaudio h the header file for rtaudio it contains the class definitions rtaudio cpp the implementation rterror h header containing various error handling constructs for rtaudio this is similar to but not identical to the example we did in class see hellosine your program is using an updated rtaudio interface which is different from the one we used in class it may be also useful to browse the rtaudio documentation and the example programs in the rtaudio distribution note even though the code is nearly all there in the example it's infinitely more useful to actually write the code from scratch even if you copy type it in line by line implement the callback function to generate the expect number of samples per call for a sine wave at 440hz the overall behavior when you run the program should be a continuous sine tone at 440hz to quit press ctrl c specification part 2 of 3 waveforms modify your program to take command line arguments and generate different signals depending the command line flag you specify sig gen type frequency width type sine saw pulse noise impulse frequency a number 0 only applicable to some signal types width pulse width only applicable to some signal types where the flags correspond to the following signals sine sine wave saw saw tooth the width is a number between 0.0 and 1.0 the determines the shape of the wave eg width 5 should result in a triangle wave pulse rectangular pulse wave the width 0.0 1.0 controls the pulse width eg width 5 should result in a square wave noise white noise impulse impluse train the frequency should determine the impulse train's fundamental period it might be a good idea to output the usage as show above if insufficient or incorrect parameters are given you ll need to implement a simple command line parser with basic error checking eg what to do when invalid irrelevant parameters are provided you ll also need to organize your code a bit to selectively generate the request signal see signal generator hints if needed specification part 3 of 3 one ring to modulate them all lastly add another command line flag input mic line input make sure to enable it in the code when initializing rtaudio if specified this flag tells the program to take the mic line input and and multiply it against the signal being generated and output the result note have fun with it your code should compile and run on the ccrma machines comment your code choose your own coding conventions but be consistent you are welcome to work together but you must do turn in your own work you ll likely get more out of it this way some considerations how to organize the code for the various types of signals how much error checking and error reporting on the command line arguments testing audio output testing audio output deliverables turn in all files readme through coursework 1 log into coursework and go to dropbox 2 create a folder named hw1 and put all the files in there the required files are source code to the project h cpp c makefile etc a short readme text section that instructions on building the project for example anyone in the class should be able to download conveys your ideas comments in constructing each program describes any difficulties you encountered in the process lists any collaborators retrieved from https ccrma stanford edu wiki 256a fall 2011 hw1 views page discussion view source history personal tools log in navigation special categories ccrma web site community portal current events recent changes random page help search toolbox what links here related changes special pages printable version permanent link powered by mediawiki this page was last modified on 3 october 2011 at 15 23 this page has been accessed 604 times privacy policy about ccrma wiki disclaimers
