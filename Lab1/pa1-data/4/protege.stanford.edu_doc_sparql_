protege using sparql in protege owl home overview documentation downloads support community wiki about us users developers see also protege owl faq using the sparql query engine with protege owl sparql is a w3c candidate recommendation towards a standard query language for the semantic web its focus is on querying rdf graphs at the triple level sparql can be used to query an rdf schema or owl model to filter out individuals with specific characteristics please refer to the sparql specification for examples to use sparql in protege owl you need version 3.2 or above after launching protege click on the owl open sparql query panel menu item this will open a panel at the bottom of the screen in the query panel on the left you can enter your query in the sparql syntax press the execute query button and the query results will be shown on the right hand side in the example above the query selects the name symbol atomic number and optionally the color of all the elements in the periodic table additionally the results will be ordered by name double clicking on a result entry will navigate to the particular individual in the individuals tab the rdf representation of the periodic table and the example sparql query shown above are accessible as part of a tutorial entitled introducing sparql querying the semantic web by leigh dodds that is available on the xml com website note you may need to take extra care when working with xml schema datatypes because sparql maps literals such as 42 or 4.2 with xsd integer and xsd double while most protege owl ontologies will use xsd int and xsd float as a result you may need to add the datatype explicitly to match with the query the trivial example above also illustrates that queries can in principle be used for constraint checking protege owl has an experimental assertion mechanism that allows you to declare whether a given statement is assumed to have results or not these assertions can be added as annotation properties to the selected class using the small assertion buttons above the query panel you can use the owl run ontology tests menu item to check all of these assertions this mechanism illustrates how queries can be kept in the model they can simply be stored as annotation property values at a class you can right click on the annotation property in the upper right corner to copy it down into the query area for programmers the protege owl api can be used to issue queries at run time the implementation is based on a mechanism to wrap a jena model inside the protege api the queries are executed by the jena sparql engine the relevant method is owlmodel executesparqlquery original author holger knublauch currently maintained by protege staff members last updated april 5 2007 home overview documentation downloads support community wiki about us protege is a national resource for biomedical ontologies and knowledge bases supported by the national library of medicine protege is a core component of the national center for biomedical ontology copyright 2012 stanford center for biomedical informatics research valid xhtml 1.0 valid css
