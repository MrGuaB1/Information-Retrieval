cs348b final project cs348b final project gary king gking cs stanford edu the big technique i implemented for my final project was a programmable shading language capable of emulating if not outright supporting many of the shaders that can be created in renderman's shading language it uses an assembly language syntax similar to the directx pixel shading language and bares a lot of similarity to simd processors my language supports branching randomness through both the ansi rand operator and ken perlin's pseudo random noise code vector and scalar arithmetic dependent texture accesses exponentiation and additional elementary operations some of the additional features i implemented in order to better support my shading language were texture mapping bump mapping and cubic environment mapping currently the advanced parameters are not supported for these features eg selectable filters clamping etc all values are returned after being passed through 2x2 box filters i am still working on a final image for the 348b web page however the following images were all generated using shaders written in my shading language to demonstrate its capabilities click on the links for the shader source code simplified cel shader on a robot leg another shot of the cel shader glass shader supporting reflection and refraction bump mapping a textured polygon a port of the procedural wood2 sl shader that ships with bmrt the source code for my project is available here lrt can be compiled by running gmake on a linux machine the shading compiler slc can be compiled by running gmake slc on a linux machine a reference for my shading language is available here my original project proposal is on line here the rib source for the robot leg can be downloaded here it is being modeled in 3dsmax the rib source for the procedural wood demo can be downloaded here
