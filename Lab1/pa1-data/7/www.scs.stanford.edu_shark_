shark a secure cooperative file system take a byte out of file system latency a secure cooperative file system overview brief overview and news pubs publications and people faq frequently asked questions download source code our goal network file systems offer a powerful transparent interface for accessing remote data unfortunately in current network file systems like nfs clients fetch data from a central file server inherently limiting the system's ability to scale to many clients while recent distributed peer to peer systems have managed to eliminate this scalability bottleneck they are often exceedingly complex and provide non standard models for administration and accountability shark is a novel file system that retains the best of both worlds the scalability of distributed systems with the simplicity of central servers shark is a distributed file system designed for large scale wide area deployment while also providing a drop in replacement for local area file systems shark introduces a novel cooperative caching mechanism in which mutually distrustful clients can exploit each others file caches to reduce load on an origin file server using a distributed index shark clients find nearby copies of data even when files originate from different servers performance results show that shark can greatly reduce server load and improve client latency for read heavy workloads both in the wide and local areas while still remaining competitive for single clients in the local area thus shark enables modestly provisioned file servers to scale to hundreds of read mostly clients while retaining traditional usability consistency security and accountability what is shark shark is a network file system specifically designed to support widely distributed applications rather than manually replicate program files users can place a distributed application and its entire run time environment in an exported file system and simply execute the program directly from the file system on all nodes of course the big challenge faced by shark is scalability shark scales to large numbers of clients through a locality aware cooperative cache when reading an uncached file a shark client avoids transferring the file or even chunks of the file from the server if the same data can be fetched from another preferably nearby client for world readable files clients will even download nearby cached copies of identical files or even file chunks originating from different servers shark leverages coral a locality aware peer to peer distributed index to coordinate client caching shark clients form self organizing clusters of well connected machines when multiple clients attempt to read identical data these clients locate nearby replicas and stripe downloads from each other in parallel thus even modestly provisioned file servers can scale to hundreds possibly thousands of clients making mostly read accesses shark receives funding as part of the iris peer to peer research and development project sponsored by nsf nyu secure computer systems project iris 7th floor 715 broadway new york ny 10003 usa
