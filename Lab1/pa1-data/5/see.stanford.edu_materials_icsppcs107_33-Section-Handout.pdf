section handout all things scheme page 1 cs107 handout 33 spring 2008 may 19 2008 section handout all things scheme problem 1 building subsets of a certain size implement the k subsets function which accepts a set and a non negative integer k and constructs a list of all those subsets of the incoming set whose size just happens to equal k your implementation should run in time that's proportional to the number of subsets in the final answer in particular you should not reuse the power set implementation from lecture and then filter on length because that's entirely too time consuming when large sets are paired with small values of k function k subsets k subsets constructs a list of all those subsets of the specified set whose size just happens to equal k examples k subsets 1 2 3 4 2 1 2 1 3 1 4 2 3 2 4 3 4 k subsets 1 2 3 4 5 6 1 1 2 3 4 5 6 k subsets abcd 0 k subsets abdd 5 define k subsets set k problem 2 up down permutations a an up down list is a homogeneous list which alternates between local minima and local maxima that is the second element is larger than the first and third the third element is smaller than the second and fourth the fourth element is larger than the third and fifth and so on informally the list zig zags up and down as you march over all of its elements using car cdr recursion implement the is up down routine which returns t if and only if the specified list of atoms is an up down list according to the specified predicate list of length 0 and 1 are automatically considered to be up down lists function is up down returns true if and only if the specified list is an up down list according to the specified predicate examples is up down t is up down 1 t is up down 1 2 2 3 f is up down 1 6 2 4 3 5 f is up down 1 6 2 4 3 5 f down up but not up down is up down 4 8 3 5 1 7 6 2 f define is up down list comp page 2 2 b implement the up down permute function which takes of list of unique integers and generates all of permutations that are up down permutations your implementation should take time that is proportional to the length of the answer in particular you may not generate all of the permutations and then filter out those that fail the predicate from part a you may assume that the list being permuted is comprised of integers and that each integer appears exactly once you needn t generalize your implementation for various comparison functions just assume that less than and greater than can be hard coded into your implementation this is difficult but quite doable if you define down up permute as well and implement each in terms of the other feel free to make use of the remove function from lecture which returns a list identical to the one specified except that all instances of a specified element have been omitted you should use mapping instead of exposed car cdr recursion function up down permute up down permute generates all those permutations of a list that just happen to be up down permutations examples remove 3 1 2 3 4 5 4 3 2 1 1 2 4 5 4 2 1 up down permute up down permute 1 1 up down permute 1 2 1 2 up down permute 1 2 3 1 3 2 2 3 1 up down permute 1 2 3 4 5 1 3 2 5 4 1 4 2 5 3 1 4 3 5 2 1 5 2 4 3 1 5 3 4 2 2 3 1 5 4 2 4 1 5 3 2 4 3 5 1 2 5 1 4 3 2 5 3 4 1 3 4 1 5 2 3 4 2 5 1 3 5 1 4 2 3 5 2 4 1 4 5 1 3 2 4 5 2 3 1 define up down permute num list
