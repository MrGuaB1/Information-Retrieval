midterm practice solutions page 1 cs106b handout 26 j zelenski feb 13 2008 midterm practice solutions midterm exam tuesday feb 19th 7 9pm terman auditorium we d love to see everyone tuesday evening but if that's impossible for you e mail head ta jason by noon thursday to arrange an alternate tuesday time remote scpd students should email jason by thursday to initiate arrangements for taking the exam onsite 1 version a assembles the result char by char using string concatenation in a loop string convertmaclineendingstopc string str string result for int i 0 i str length i++ if s i n result r n else result s i return result version b does find replace operations on the original string to produce the result string convertmaclineendingstopc string str int pos 0 while pos str find n pos string npos str replace pos 1 r n or str insert pos r pos 2 return str 2 double similarity vector char &v1 vector char &v2 int pos1 0 pos2 0 nmatches 0 while pos1 v1 size && pos2 v2 size if v1 pos1 v2 pos2 pos1++ else if v1 pos1 v2 pos2 pos2++ else nmatches++ pos1++ pos2++ double avgsize double v1 size v2 size 2 return nmatches avgsize page 2 2 bool markovmatch map vector char &m1 map vector char &m2 map vector char iterator itr m1 iterator while itr hasnext string key itr next if m2 containskey key if similarity m1 key m2 key 7 return false return true 3 changes shown in bold int permute string sofar string rest lexicon &lex if lex containsprefix sofar return 0 if rest return lex containsword sofar 1 0 else int count 0 for int i 0 i rest length i++ if rest find rest i i 1 string npos skip dup char string rem rest substr 0 i rest substr i 1 count permute sofar rest i rem lex return count 4 bool canspell string word vector string & cubes if word return true for int i 0 i cubes size i++ string curcube cubes i if curcube find word 0 string npos cubes removeat i remove cube so not used again if canspell word substr 1 cubes cubes insertat i curcube return true cubes insertat i curcube backtrack replace cube return false trigger backtracking page 3 3 5 queue int extractstrand queue int &q queue int strand int last q dequeue strand enqueue last int qsize q size need to cache since changes inside loop for int i 0 i qsize i++ int cur q dequeue if cur last strand enqueue cur last cur else q enqueue cur return strand 6 there are many correct variations here is one recursive and one iterative solution bool contains cellt list cellt sub if sub null return true if list null return false if list val sub val return contains list next sub next else return contains list next sub iterate over main list whenever matches sub advance sub bool contains cellt list cellt sub for list null list list next if sub null break if list val sub val sub sub next return sub null 7 void roll stack char &s int nelems int npos queue char q stack char tmp for int i 0 i nelems i++ remove top n elems q enqueue s pop for int i 0 i npos i++ cycle npos q enqueue q dequeue while q isempty flip around tmp push q dequeue while tmp isempty put back on stack s push tmp pop page 4 4 8a winky is o 2n the recurrence is t n t n 1 t n 2 t n 3 t 2 t 1 t 0 repeatedly substituting to expand and grouping terms will allow you to see the doubling pattern that arises another strategy is to notice that t n 2 t n 3 t 1 t 0 is t n 1 and reverse substitute to get t n 2t n 1 which is the towers of hanoi recurrence that solves to o 2n 8b as is the code prints cucumber because the salad stack is unaffected by the call if the stack is instead passed by reference the code will print lettuce because the toss function reversed the stack contents 8c selection sort it does many comparisons to determine the remaining max but does at most n 1 swaps total in contrast to insertion sort which shuffles each student down the hall into the correct spot on average requiring n 2 moves per student or n2 2 total moves
