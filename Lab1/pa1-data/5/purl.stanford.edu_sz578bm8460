stanford digital repository stanford digital repository type safety in the linux kernel creator hackett brian william contributor s aiken alexander primary advisor engler dawson r advisor lam monica s advisor stanford university computer science dept description type casts are ubiquitous in linux and other systems software casts reinterpret a pointer to a heap object of one type as a pointer to another type and are the main way by which programmers can violate type safety the notion that objects are used as a consistent type throughout their lifetime a program which is not type safe can exhibit corruption and crashes moreover the c language provides no guarantees about type safety so responsibility for ensuring type safety falls entirely to programmers this thesis describes an approach to proving that type casts preserve type safety specifically in the linux kernel this approach uses automated static analysis to infer the abstractions underlying each type cast type casts are performed for a reason often to implement polymorphism or another advanced programming language feature and by identifying this reason the cast can be proved safe we prove this safety for 75.2 of downcasts to structure types in linux out of a population of 28767 analyzing type casts in linux requires deep reasoning about the heap at a scale well beyond the previous state of the art this thesis describes the analysis techniques we developed for this problem which are broadly applicable to doing sound and precise analysis of the heap at a large scale brian william hackett submitted to the department of computer science thesis ph d stanford university 2010 view in searchworks 2010 by brian william hackett this work is licensed under a creative commons attribution noncommercial 3.0 unported license file download description thesis augmented pdf body of dissertation stanford university stanford california 94305 650 725 1064 terms of use copyright complaints
