here are the solutions to the warmup problems given in assignment 3 function printinbinary uses recursion to print the binary representation base two of a given number the parameter is expected to be non negative void printinbinary int number if number 1 printinbinary number 2 recursively print rest of binary digits cout number 2 now print least signficant binary digit function recsum recursive function to explore all possible subsets in attempt to find one that sums to target value the parameters are the vector of numbers the index of the next element to consider the sum so far and the target value if the sum so far is equal to the target we have found the desired subset and can immediately return true if we have run out of elements to try we return false otherwise take the next vector element and try it both in and out stopping as soon as we find a successful subset this in out pattern is commonly used for any sort of subset power set exploration bool recsum vector int & nums int index int sumsofar int target if sumsofar target return true success base case if index nums size return false failure base case recursive case try next element both in and out of the sum return recsum nums index 1 sumsofar target recsum nums index 1 sumsofar nums index target function altrecsum same goal as function recsum described above but uses a different recursive pattern to compute result instead of considering one element at each call and trying it both in out this version chooses an element to add on each call by picking one of the remaining elements and discarding any elements in between this is the choose one of remaining pattern such as used for generating permutations bool altrecsum vector int & nums int index int sumsofar int target if sumsofar target return true success base case can include same explicit failure case as above or let fall through loop will not execute for int i index i nums size i++ if recsum nums i 1 sumsofar nums i target return true return false function canmakesum given an vector of numbers and a target sum reports whether any subset of the numbers in the array sum to that target this is just a wrapper for the recursive function recsum or could call altrecsum for same result bool canmakesum vector int & nums int targetsum return recsum nums 0 0 targetsum
