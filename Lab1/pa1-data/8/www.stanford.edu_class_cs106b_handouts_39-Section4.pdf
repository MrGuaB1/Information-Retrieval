section handout 4 page 1 eric roberts handout 39 cs106b february 15 2012 section handout 4 the editorbuffer class problem 1 the gap buffer form of the stack model chapter 13 exercise 2 page 603 even though the stacks in the stackbuf cpp implementation of the editorbuffer class expand dynamically the amount of character space required in the stacks is likely to be twice as large as that required in the corresponding array implementation the problem is that each stack must be able to accommodate all the characters in the buffer suppose for example that you are working with a buffer containing n characters if you re at the beginning of the buffer those n characters are in the after stack if you move to the end of the buffer those n characters move to the before stack as a result each of the stacks must have a capacity of n characters you can reduce the storage requirement in the two stack implementation of the buffer by storing the two stacks at opposite ends of the same internal array the before stack starts at the beginning of the array while the after stack starts at the end the two stacks then grow toward each other as indicated by the arrows in the following diagram reimplement the editorbuffer class using this representation which is in fact the design strategy used in java's editor buffers and many other widely used editing tools make sure that your program continues to have the same computational efficiency as the two stack implementation in the text and that the buffer space expands dynamically if necessary problem 2 doubly linked lists chapter 13 exercise 12 page 607 implement the editorbuffer class using the strategy described in the section entitled doubly linked lists at the end of chapter 13 be sure to test your implementation as thoroughly as you can in particular make sure that you can move the cursor in both directions across parts of the buffer where you have recently made insertions and deletions thought question the strategy used in problem 2 has the advantage that all six editor operations run in constant time unfortunately it does so at a high cost in memory space think about strategies you might use to reduce the space required while retaining the constant time performance and be prepared to discuss these strategies in section
