chris copeland cs 96si project abstract graph algorithms in common lisp i implemented dijkstra's shortest path algorithm and k page 1 chris copeland cs 96si project abstract graph algorithms in common lisp i implemented dijkstra's shortest path algorithm and kruskal's minimum spanning tree algorithm in common lisp using graphviz a free graph visualization toolkit to display results lisp was a good fit for this task because implementing custom data structures is very natural using a combination of common lisp's built in types and collecting these types in lists to form aggregate types this project consisted of implementing two separate assignments from cs 106b in addition to implementing my own graph data structure and output mechanism via graphviz both dijkstra's and kruskal's algorithms use a minimum priority queue to order paths and edges respectively by lowest cost of traversal i opted to implement a binary heap priority queue on top of lisp's built in array type my graph data structure was essentially a list consisting of two hash tables one for nodes and the other for edges nodes contained the identifiers of their outgoing edges and edges contained the identifiers of their start and end nodes as well as a numerical weight the implementations of dijkstra's and kruskal's algorithms were adapted from the canonical imperative ones i used the common lisp loop macro in each of them which made the implementations seemingly less like true functional implementations but i did make use of lisp's powerful mapping functions within the looping constructs i used mapcar and a lambda to add all extensions of the current path to the priority queue in dijkstra's algorithm and i used maphash and a lambda to conveniently merge subtrees in kruskal's algorithm
