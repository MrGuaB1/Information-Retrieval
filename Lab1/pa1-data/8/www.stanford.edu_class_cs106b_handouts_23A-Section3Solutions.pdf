solutions to section handout 3 page 1 eric roberts handout 23a cs106b january 30 2012 solutions to section handout 3 problem 1 weights and balances page 2 2 problem 2 shortest path problem 3 filling a region page 3 3 problem 4 generating multiword anagrams page 4 4 problem 5 recursion and big o a o n2 the outer loop will run n times each time through the outer loop the inner loop will run i times where i runs from 0 to n 1 a constant amount of work is done in the body of the inner loop this leads to the series 0 1 2 n 1 which as you know from the selection sort analysis is n n 1 2 keeping only the highest order term and throwing away any constant factors gives the o n2 computational complexity b o 1 the outer loop executes 10 times the inner loop i times where i runs from 0 to 9 so there are 100 multiply add operations but it does that same amount of work for any value of n thus the computational complexity is constant with respect to n the constant 1 in o 1 signifies this constant time doesn t necessarily mean that a function computes its result instantly but the function always does the same amount of work c o log n on each recursive call the argument n is divided by 2 the complexity of this operation is therefore the number of times you can divide n by 2 until you reach 1 from the discussion of either binary search or merge sort you know that this in o log n d calling mystery4 pumpkin returns nikpmup which consists of the letters in reverse order the calls to concatenation and mystery4 which is abbreviated here as m4 to save space look like this in problems such as this one the structure of the tree is often sufficient to compute the complexity order the key points to observe are the work done at each level is o n there are o log n levels because the string is always divided in half the computational complexity is therefore the same as that for the merge sort algorithm which is o n log n
