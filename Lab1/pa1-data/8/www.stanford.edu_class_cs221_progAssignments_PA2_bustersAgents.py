bustersagents py licensing information please do not distribute or publish solutions to this project you are free to use and extend these projects for educational purposes the pacman ai projects were developed at uc berkeley primarily by john denero denero cs berkeley edu and dan klein klein cs berkeley edu for more info see http inst eecs berkeley edu cs188 sp09 pacman html import util from game import agent from game import directions from keyboardagents import keyboardagent import inference class bustersagent an agent that tracks and displays its beliefs about ghost positions def __init__ self index 0 inference exactinference ghostagents none inferencetype util lookup inference globals self inferencemodules inferencetype a for a in ghostagents def registerinitialstate self gamestate initializes beliefs and inference modules import __main__ self display __main__ _display for inference in self inferencemodules inference initialize gamestate self ghostbeliefs inf getbeliefdistribution for inf in self inferencemodules self firstmove true def observationfunction self gamestate removes the ghost states from the gamestate agents gamestate data agentstates gamestate data agentstates agents 0 none for i in range 1 len agents return gamestate def getaction self gamestate updates beliefs then chooses an action based on updated beliefs for index inf in enumerate self inferencemodules if not self firstmove inf elapsetime gamestate self firstmove false inf observestate gamestate self ghostbeliefs index inf getbeliefdistribution self display updatedistributions self ghostbeliefs return self chooseaction gamestate def chooseaction self gamestate by default a bustersagent just stops this should be overridden return directions stop class busterskeyboardagent bustersagent keyboardagent an agent controlled by the keyboard that displays beliefs about ghost positions def __init__ self index 0 inference exactinference ghostagents none keyboardagent __init__ self index bustersagent __init__ self index inference ghostagents def getaction self gamestate return bustersagent getaction self gamestate def chooseaction self gamestate return keyboardagent getaction self gamestate from distancecalculator import distancer from game import actions from game import directions class greedybustersagent bustersagent an agent that charges the closest ghost def registerinitialstate self gamestate pre computes the distance between every two points bustersagent registerinitialstate self gamestate self distancer distancer gamestate data layout false def chooseaction self gamestate first computes the most likely position of each ghost that has not yet been captured then chooses an action that brings pacman closer to the closest ghost in maze distance to find the maze distance between any two positions use self distancer getdistance pos1 pos2 to find the successor position of a position after an action successorposition actions getsuccessor position action livingghostpositiondistributions defined below is a list of util counter objects equal to the position belief distributions for each of the ghosts that are still alive it is defined based on these are implementation details about which you need not be concerned 1 gamestate getlivingghosts a list of booleans one for each agent indicating whether or not the agent is alive note that pacman is always agent 0 so the ghosts are agents 1 onwards just as before 2 self ghostbeliefs the list of belief distributions for each of the ghosts including ghosts that are not alive the indices into this list should be 1 less than indices into the gamestate getlivingghosts list pacmanposition gamestate getpacmanposition legal a for a in gamestate getlegalpacmanactions livingghosts gamestate getlivingghosts livingghostpositiondistributions beliefs for i beliefs in enumerate self ghostbeliefs if livingghosts i 1 your code here util raisenotdefined
