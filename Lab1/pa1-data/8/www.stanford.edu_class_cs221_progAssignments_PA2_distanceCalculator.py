distancecalculator py licensing information please do not distribute or publish solutions to this project you are free to use and extend these projects for educational purposes the pacman ai projects were developed at uc berkeley primarily by john denero denero cs berkeley edu and dan klein klein cs berkeley edu for more info see http inst eecs berkeley edu cs188 sp09 pacman html this file contains a distancer object which computes and caches the shortest path between any two points in the maze it returns a manhattan distance between two points if the maze distance has not yet been calculated example distancer distancer gamestate data layout distancer getdistance 1 1 10 10 the distancer object also serves as an example of sharing data safely among agents via a global dictionary distancemap and performing asynchronous computation via threads these examples may help you in designing your own objects but you shouldn t need to modify the distancer code in order to use its distances import threading sys time random class distancer def __init__ self layout background true default 10000 initialize with distancer layout changing default is unnecessary this will start computing maze distances in the background and use them as soon as they are ready in the meantime it returns manhattan distance to compute all maze distances on initialization set background false self _distances none self default default start computing distances in the background when the dc finishes it will fill in self _distances for us dc distancecalculator dc setattr layout self dc setdaemon true if background dc start else dc run def getdistance self pos1 pos2 the getdistance function is the only one you ll need after you create the object if self _distances none return manhattandistance pos1 pos2 if isint pos1 and isint pos2 return self getdistanceongrid pos1 pos2 pos1grids getgrids2d pos1 pos2grids getgrids2d pos2 bestdistance self default for pos1snap snap1distance in pos1grids for pos2snap snap2distance in pos2grids griddistance self getdistanceongrid pos1snap pos2snap distance griddistance snap1distance snap2distance if bestdistance distance bestdistance distance return bestdistance def getdistanceongrid self pos1 pos2 key pos1 pos2 if key in self _distances return self _distances key else raise exception positions not in grid str key def isreadyformazedistance self return self _distances none def manhattandistance x y return abs x 0 y 0 abs x 1 y 1 def isint pos x y pos return x int x and y int y def getgrids2d pos grids for x xdistance in getgrids1d pos 0 for y ydistance in getgrids1d pos 1 grids append x y xdistance ydistance return grids def getgrids1d x intx int x if x int x return x 0 return intx x intx intx 1 intx 1 x machinery for computing maze distances distancemap distancemapsemaphore threading semaphore 1 distancethread none def waitondistancecalculator t global distancethread if distancethread none time sleep t class distancecalculator threading thread def setattr self layout distancer default 10000 self layout layout self distancer distancer self default default def run self global distancemap distancethread distancemapsemaphore acquire if self layout walls not in distancemap if distancethread none raise exception multiple distance threads distancethread self distances computedistances self layout print sys stdout distancer switching to maze distances distancemap self layout walls distances distancethread none else distances distancemap self layout walls distancemapsemaphore release self distancer _distances distances def computedistances layout distances allnodes layout walls aslist false for source in allnodes dist closed for node in allnodes dist node sys maxint import util queue util priorityqueue queue push source 0 dist source 0 while not queue isempty node queue pop if node in closed continue closed node true nodedist dist node adjacent x y node if not layout iswall x y 1 adjacent append x y 1 if not layout iswall x y 1 adjacent append x y 1 if not layout iswall x 1 y adjacent append x 1 y if not layout iswall x 1 y adjacent append x 1 y for other in adjacent if not other in dist continue olddist dist other newdist nodedist 1 if newdist olddist dist other newdist queue push other newdist for target in allnodes distances target source dist target return distances def getdistanceongrid distances pos1 pos2 key pos1 pos2 if key in distances return distances key return 100000
