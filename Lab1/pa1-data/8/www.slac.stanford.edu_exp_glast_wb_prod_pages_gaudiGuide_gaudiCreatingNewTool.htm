creating a new gaudi tool print version creating a new gaudi tool define the interface s what is this service supposed to do can the tasks be broken down into multiple components ie interfaces define the interface class es making sure they derive from gaudi's ialgtool class for each class define the name of the id for this interface declaration of the interface id interface id major version minor version static const interfaceid iid_iexampletool iexampletool 1 0 the convention is to name the identifier variable as iid_nameofinterfaceclass each interface is assigned its own unique id gaudi has already defined ids for each of its own interfaces you do not want to re use an existing id add a public method to the interface class static const interfaceid& interfaceid return iid_iexampletool define a new concrete class that is derived from gaudi's algtool class and your newly defined interface class es this class much contain a constructor of the form mynewtool const std string& type const std string& name const iinterface parent in the new concrete class implementation file you must have something like include gaudikernel toolfactory h static toolfactory mynewtool s_factory const itoolfactory& mynewtoolfactory s_factory mynewtool mynewtool const std string& type const std string& name const iinterface parent algtool type name parent declare base interface for all consecutive concrete classes declareinterface iexampletool this make your service available to be dynamically loaded at run time this is accomplished within your package's packagename_load and packagename_dll routines currently the convention is to place these files within a directory called dll under the package's src directory you will only have to modify the packagename_load file by adding the following line to the declare_factory_entries method declare_tool mynewtool owned by heather kelly last updated by chuck patterson 08 01 2005 back to top
