section handout 5 trees and expressions page 1 eric roberts handout 46 cs106b february 22 2012 section handout 5 trees and expressions problem 1 designing an interface for class hierarchies one of the fundamental features of object oriented languages is that classes form hierarchies through the inheritance chain in c++ classes can inherit behavior from more than one class so the notion of a superclass is a bit harder to pin down than it is in java where each class has exactly one superclass in practice however most classes in c++ do use a single inheritance chain which means that the class hierarchy is structured in the form of a tree consider for example the following diagram in this diagram hourlyemployee commissionedemployee and salariedemployee are each subclasses of the more general employee class similarly the expression class used in chapter 17 looks like this when drawn as a class diagram your primary job in this problem is to design and implement a class that can store the hierarchical relationships shown in these class diagrams as these diagrams indicate each class has a name and a superclass which will be null for the root of the tree to illustrate the idea of inheritance it is useful to include with each class a list of the methods that it exports directly given an object of that class you could call any of these methods and any of the methods defined by a superclass above it in the hierarchy eeyolpme eeyolpmedenoissimmoc eeyolpmedeiralas eeyolpmeylruoh pxednuopmoc pxetnatsnoc pxereifitnedi noisserpxe page 2 2 figure 1 shows a piece of the class hierarchy for the gobject class hierarchy in the acm graphics java package inside the box for each class is a list of the common public methods it implements thus given an object of type g3drect you can call setraised because that is defined in the g3drect class itself setfilled because that is defined in the grect class and setcolor because that is defined all the way back at the gobject level task 1a design the interface for representing class hierarchies your first task in solving this problem is to define a structure that is capable of representing the classes and methods in a tree structured class hierarchy to do so you need to write an interface class h that exports a class named class which could represent any of the boxes in figure 1 what methods does class need to export what does its constructor look like what private instance variables will it need task 1b implement the class you defined in the previous task to complete the class definition you need to write a file called class cpp that supplies the implementation for class lebalg setfont getfont setlabel getlabel getascent getdescent tcejbog getx gety getlocation setlocation move getsize getwidth getheight contains setcolor getcolor crag setstartangle getstartangle setsweepangle getsweepangle getstartpoint getendpoint scale setfilled isfilled setfillcolor getfillcolor egamig setimage getimage setsize setbounds scale tcerg enilg setstartpoint getstartpoint setendpoint getendpoint scale setfilled isfilled setfillcolor getfillcolor setsize setbounds scale lavog setfilled isfilled setfillcolor getfillcolor setsize setbounds scale tcerdnuorg getarcwidth getarcheight tcerd3g setraised israised figure 1 class diagram for a subset of the acm graphics library page 3 3 task 1c write a function that displays all the methods available to a class now that you have a definition for class you can use it to generate some useful information working as a client of the class h interface write a function void listallmethods class c that takes a pointer to a class object and displays a list of all the methods you could apply to an object of that class along with the name of the class in which that method is defined for example if classg3rect has been initialized to correspond to the g3rect class shown in figure 1 calling listallmethods classg3rect should produce the following output problem 2 convert an expression to reverse polish notation write a program that reads expressions from the user in their standard mathematical form and then writes out those same expressions using reverse polish notation in which the operators follow the operands to which they apply reverse polish notation or rpn was introduced in the discussion of the calculator in chapter 5 your program should be able to duplicate this sample run your program should work entirely as a client of the exp h interface
