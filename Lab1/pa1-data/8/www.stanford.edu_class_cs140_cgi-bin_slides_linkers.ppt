slide 1 cs 140 lecture notes linkers slide 1 memory layout for process code 0 data stack cs 140 lecture notes linkers slide 2 creating a process code 0 data stack 101010101010101010101010101010101010101010101010 cc xc xs as xo 101010101010101010101010101010101010101010101010 cc yc ys as yo 101010101010101010101010101010101010101010101010 cc zc zs as zo 101010101010101010101010101010101010101010101010 source code assembly code object code executable a out compiler assembler linker loader ld os cs 140 lecture notes linkers slide 3 a simple example extern float sin extern printf scanf main double x result printf type number scanf f &x result sin x printf sine is f n result main c int printf char fmt int scanf char fmt stdio c double sin double x static double res lastx if x lastx lastx x compute sin x return res math c cs 140 lecture notes linkers slide 4 object file extern float sin extern printf scanf main double x result printf type number scanf f &x result sin x printf sine is f n result main c main o 20 32 40 56 call printf call scanf call sin call printf def main t 0 ref printf t 20 t 56 ref scanf t 32 ref sin t 40 text segment symbols relocation cs 140 lecture notes linkers slide 5 object file double sin double x static double res lastx if x lastx lastx x compute sin x return res math c math o 8 20 204 0 8 load lastx store lastx load res res lastx def sin t 0 def lastx d 0 def res d 8 ref lastx t 8 t 20 ref res t 204 text segment data segment relocation symbols cs 140 lecture notes linkers slide 6 after pass 1 main o text 0 64 276 700 math o text stdio o text math o data 708 stdio o data 836 main 0 sin 64 lastx 700 result 708 printf 314 scanf 508 memory map symbol table cs 140 lecture notes linkers slide 7 relocation text segment in main o 40 call 0 ref sin t 40 relocation record in main o sin 64 symbol table text segment in a out 40 call 64 cs 140 lecture notes linkers slide 8
