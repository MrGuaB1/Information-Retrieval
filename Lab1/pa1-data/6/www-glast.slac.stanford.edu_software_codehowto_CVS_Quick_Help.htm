most commonly most commonly used cvs commands conventions green these are generic user supplied things optional things files this may be replaced by a single filename a space separated list of filenames or an expression involving wildcards usually commands cvs checkout d dir r tag module name the command will create the optional specified dir if it doesn t already exist r will check out the specified tagged version typically if you expect to be developing in the package you want the head in which case you should omit the r option cvs add m multi word msg files add new files to be maintained in the repository may also add a directory this way you still need to do a commit add just marks the files as being commitable unlike most other commands add does not act recursively on directories so adding a directory does not add the files contained by the directory use the cvs import command for this kind of thing cvs commit m multi word msg files works recursively on directories if no files are specified everything reachable from current directory which is newer than the version in the repository will be committed if there is anything in the repository which is newer than the copy in your working directory cvs will refuse to do anything until you issue a cvs update qv if no message is supplied on the command line cvs will bring up your editor cvs n update compare working directory to the versions of the same files in the repository if you have not changed a file but there is a newer version in the repository cvs will replace your local copy with the repository version if both files copy in your working directory and in repository have changed since you checked out the file cvs will attempt to merge them under some circumstances it will complain that there is a conflict in order not to be unpleasantly surprised it's often best to issue the command with the n flag first cvs will tell you about any changes it would make without actually making them each file which has changed somewhere since you checked it out is mentioned in the output with a code letter to tell you what action cvs plans to take here is some sample output jrb noric06 cvs n update cvs update updating u changelog cvs update updating calibutil m calibutil metadata h cvs update updating cmt m cmt requirements cvs update updating doc doc calcal txt cvs update updating src src metadata cxx src mysqlopt cnf cvs update updating xml cvs update updating xml test u means the file is newer in the repository your copy will be replaced by the repository version m means you have made changes but cvs believes it can successfully merge them with changes if any to the repository version means the file doesn t exist in the repository but is not on the list of things you ve asked cvs to ignore with a file called cvsignore this is not necessarily an error but if you think the file should be in the repository you should do an add p essentially the same as u but file is just patched instead of being entirely rewritten c which means both your working version and the repository version have changed and cvs doesn t know how to merge them a means you ve issued an add command but haven t yet committed the new files r is similar but for removed files cvs remove f l r files like add remove is an instruction to cvs to mark the file for removal there are actually three steps involved get the file out of the working directory eg rm issue the cvs remove command do a cvs commit of the file you can do 1 and 2 together with the f option by default the command acts recursively on directories r option to force it to operate only on the local directory use the l option cvs rtag tagid modules tags repository current revision of source files in the module s in general is to be preferred to cvs tag which uses working directory versions of files back to installing cvs
