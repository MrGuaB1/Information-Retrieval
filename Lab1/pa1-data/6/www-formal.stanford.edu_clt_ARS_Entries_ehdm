name ehdm enhanced hierarchical development methodology keywords specification verification environment hierarchical development methodology parameterized modules higher order logic subtyping arithmetic decision procedures hoare logic multi level security description semantics classical higher order logic with predicate subtypes hoare logic axioms may be introduced freely definitions which may be recursive provide conservative extension hierarchical specifications related by theory interpretation deductive machinery typechecking resolves name references and ensures type consistency of the specification typechecking can generate proof obligations for proof checking user supplies relevant lemmas and definitions as premises for the theorem the resulting implication is skolemized for manual and heuristic instantiation powerful ground decision procedures are then applied for propositional logic and linear arithmetic equalities inequalities the ipc is an emacs based tool for incremental interactive proof development hoare sentence prover is used for checking proofs of imperative programs which can be automatically translated to ada mappings specified between specifications generate proof obligations required for theory interpretation same mechanism allows demonstration of consistency of axiomatically specified theories flow analyzer for multilevel security analysis dynamics theories along with proofs are developed and saved as parameterized modules persistence the current context consisting of the current modules along with their status parsed typechecked proved etc is saved so that a new session can be resumed from the current state contact persons john rushby sam owre computer science laboratory sri international 333 ravenswood avenue menlo park ca 94025 usa email rushby owre csl sri com tel 415 859 5456 5114 fax 415 859 2844 user group used for formal specification and verification of fault tolerant algorithms and architectures by sri and nasa in use at several other aerospace research centers and also in laboratories engaged in secure systems development pragmatics strengths rich type system with predicate subtypes parameterized modules refinement hierarchy facility for ada code generation higher order logic powerful arithmetic decision procedures proof descriptions allow informal proof to be extracted has been used by people other than its developers to perform very hard formal specifications and verifications eg byzantine fault tolerant algorithms including clock synchronization weaknesses restricted availability only limited support for interactive proof development and rewriting proof checking tools are not customizable via tactics documentation full language and system manuals and tutorial are available several large specifications and verifications are fully documented some smaller examples are being developed applications 1 verification of lamport and melliar smith's interactive convergence algorithm for byzantine fault tolerant clock synchronization ehdm proof identified several flaws in the original argument 2 verification of a schematic protocol for byzantine fault tolerant clock synchronization due to schneider paul miner at nasa has modified this proof and verified the correctness requirements for lundelius and lynch's fault tolerant midpoint algorithm 3 verification of a refinement hierarchy for a reliable computing platform for digital flight control applications proof includes fault masking and transient recovery in the presence of skews between local clocks 4 formal specification and verification of the unwinding theorems of classical and intransitive noninterference a formulation of computer security 5 several smaller examples mini cayuga pipelined microprocessor finite ramsey theorem oral messages algorithm for interactive consistency and byzantine agreement extensions enhancements expect to augment theorem prover with technology developed for pvs resource requirements implementation language common lisp clos runs on sun 3 and sun 4 workstations requires lucid lisp licence environment support required uses customized gnu emacs as its interface pop up menus available under sunview typeset specifications require latex needs 32mbytes of real memory 50 mbytes of swap space 50 mbytes of disk space where to get it distribution controlled by national security agency permission granted routinely for us government agencies us companies and universities no overseas distribution contact john rushby at address above for information on procedure for requesting permission to use system from nsa system supplied free of charge object code only on sun cartridge no ftp distribution info source date john rushby aug 5 1992
