programming tips and best practices slac computer security search slac slac home computing home computing outages help computer security windows security passwords user education policies programming tips and best practices programming tips and best practices cert org top 10 secure coding practices validate input validate input from all untrusted data sources proper input validation can eliminate the vast majority of software vulnerabilities be suspicious of most external data sources including command line arguments network interfaces environmental variables and user controlled files seacord 05 heed compiler warnings compile code using the highest warning level available for your compiler and eliminate warnings by modifying the code c msc00 a c++ msc00 a architect and design for security policies create a software architecture and design your software to implement and enforce security policies for example if your system requires different privileges at different times consider dividing the system into distinct intercommunicating subsystems each with an appropriate privilege set keep it simple keep the design as simple and small as possible saltzer 74 saltzer 75 complex designs increase the likelihood that errors will be made in their implementation configuration and use additionally the effort required to achieve an appropriate level of assurance increases dramatically as security mechanisms become more complex default deny base access decisions on permission rather than exclusion this means that by default access is denied and the protection scheme identifies conditions under which access is permitted saltzer 74 saltzer 75 adhere to the principle of least privilege every process should execute with the the least set of privileges necessary to complete the job any elevated permission should be held for a minimum time this approach reduces the opportunities an attacker has to execute arbitrary code with elevated privileges saltzer 74 saltzer 75 sanitize data sent to other systems sanitize all data passed to complex subsystems c str02 a such as command shells relational databases and commercial off the shelf cots components attackers may be able to invoke unused functionality in these components through the use of sql command or other injection attacks this is not necessarily an input validation problem because the complex subsystem being invoked does not understand the context in which the call is made because the calling process understands the context it is responsible for sanitizing the data before invoking the subsystem practice defense in depth manage risk with multiple defensive strategies so that if one layer of defense turns out to be inadequate another layer of defense can prevent a security flaw from becoming an exploitable vulnerability and or limit the consequences of a successful exploit for example combining secure programming techniques with secure runtime environments should reduce the likelihood that vulnerabilities remaining in the code at deployment time can be exploited in the operational environment seacord 05 use effective quality assurance techniques good quality assurance techniques can be effective in identifying and eliminating vulnerabilities penetration testing fuzz testing and source code audits should all be incorporated as part of an effective quality assurance program independent security reviews can lead to more secure systems external reviewers bring an independent perspective for example in identifying and correcting invalid assumptions seacord 05 adopt a secure coding standard develop and or apply a secure coding standard for your target development language and platform references saltzer 74 saltzer jh protection and the control of information sharing in multics communications of the acm 17 7 july 1974 388 402 saltzer 75 saltzer jh & schroeder md the protection of information in computer systems proceedings of the ieee 63 9 september 1975 1278 1308 seacord 05 seacord r secure coding in c and c++ upper saddle river nj addison wesley 2006 isbn 0321335724 swiderski 04 swiderski f & snyder w threat modeling redmond wa microsoft press 2004 sans the top 25 programming errors are listed below in three categories programming error category insecure interaction between components 9 errors programming error category risky resource management 9 errors programming error category porous defenses 7 errors from ounce labs an ibm company the path to a secure application a source code security review checklist owner slac computer security page created 2 2 2010 last updated 07 22 2010 feedback please send to computer security feedback
