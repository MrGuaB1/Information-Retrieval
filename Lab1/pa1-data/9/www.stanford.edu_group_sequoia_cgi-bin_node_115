arrays within structs sequoia logo sequoia programming the memory hierarchy docs sequoia introduction sequoia language reference syntax overview data types scalars arrays arrays within structs array blocks the copy operator tasks iteration constructs undefined behavior sequoia mapping reference sequoia api example programs using the system navigation recent posts docs publications downloads search forums about user login username password create new account request new password home docs sequoia language reference data types arrays within structs sequoia abstract arrays and array blocks with their decoupling of element locations and data layout from logical structure completely replace c's arrays in the language except in one situation arrays contained within a struct or union are still c style arrays further a struct or union containing an array is still considered a scalar object the reason for this distinction is that the physical layout of an array that is packed within a struct is exposed to the user while sequoia's arrays abstract these physical details moreover sequoia's arrays are intended to be decomposed into sub arrays while structures and other scalar objects are treated as indivisible data units however despite being native c arrays these contained arrays can only be accessed using c's array indexing and not via pointer notation in addition sequoia's array block notation can t be used on such arrays nor can they be passed as arguments to task calls or the copy operator arrays up array blocks printer friendly version computer systems laboratory stanford university fatal error call to undefined function t in afs ir stanford edu group sequoia cgi bin modules checkout checkout module on line 80
