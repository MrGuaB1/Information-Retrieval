mapseq sequoia logo sequoia programming the memory hierarchy docs sequoia introduction sequoia language reference syntax overview data types array blocks the copy operator tasks iteration constructs introduction to sequoia's iteration constructs mappar mapseq mapreduce nested iteration constructs iteration construct grammar undefined behavior sequoia mapping reference sequoia api example programs using the system navigation recent posts docs publications downloads search forums about user login username password create new account request new password home docs sequoia language reference iteration constructs mapseq the mapseq map sequential iteration construct is syntactically the same as mappar with the difference being that its iterations are executed serially and not in parallel it is essentially a more constrained version of a c for loop the syntactic rules for mapseq are the same as mappar except for the rule dealing with scalar arguments of the called subtask in mappar iteration spaces subtasks may only have in arguments while in mapseq iteration spaces subtasks may also have inout and out arguments since the subtask calls occur sequentially with each iteration's call completing before the next iteration's call begins the resultant values in scalar variables passed to such subtask arguments are well defined array blocks that are passed as arguments to a subtask inside a mapseq construct may freely overlap across iterations but overlapping array blocks that are passed to the same iteration's subtask call will still result in undefined behavior if there is input output or output output aliasing just as with any task call see the section on undefined behavior for details the main utility of a mapseq iteration construct over a c for loop is its ability to be used in a sequoia nested iteration space mappar up mapreduce printer friendly version computer systems laboratory stanford university
