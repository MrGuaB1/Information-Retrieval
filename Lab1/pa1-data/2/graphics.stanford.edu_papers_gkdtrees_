gaussian kd trees for fast high dimensional filtering siggraph 2009 gaussian kd trees for fast high dimensional filtering andrew adams natasha gelfand jennifer dolson marc levoy siggraph 2009 we use a monte carlo sampled kd tree we call the gaussian kd tree for various filtering tasks our method applies to bilateral filtering of image left non local means of bursts of images middle and denoising geometry right abstract we propose a method for accelerating a broad class of non linear filters that includes the bilateral non local means and other related filters these filters can all be expressed in a similar way first assign each value to be filtered a position in some vector space then replace every value with a weighted linear combination of all values with weights determined by a gaussian function of distance between the positions if the values are pixel colors and the positions are x y coordinates this describes a gaussian blur if the positions are instead x y r g b coordinates in a five dimensional space color volume this describes a bilateral filter if we instead set the positions to local patches of color around the associated pixel this describes non local means we describe a monte carlo kd tree sampling algorithm that efficiently computes any filter that can be expressed in this way along with a gpu implementation of this technique we use this algorithm to implement an accelerated bilateral filter that respects full 3d color distance accelerated non local means on single images volumes and unaligned bursts of images for denoising and a fast adaptation of non local means to geometry if we have n values to filter and each is assigned a position in a d dimensional space then our space complexity is o dn and our time complexity is o dn log n whereas existing methods are typically either exponential in d or quadratic in n paper adobe acrobat pdf 8.4 mb video h 264 61.3 mb supplemental material zip 350 mb implementations here is the gpu implementation of the paper which runs on linux with nvidia's cuda installed there's a readme txt inside the package to get you started linux binary and source here is the cpu implementation of the paper including example code for computing bilateral filters cygwin binary and cross platform source the cpu implementation is also included in imagestack including operations that use it for bilateral filtering joint bilateral filtering and non local means
