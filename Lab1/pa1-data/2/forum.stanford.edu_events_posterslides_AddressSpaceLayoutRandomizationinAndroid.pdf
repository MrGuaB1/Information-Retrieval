securing android page 1 securing android aslr for mobile devices hristo bojinov joint work with dan boneh and google android team page 2 motivation and constraints prevent return to libc attacks complementary to non executable heaps non executable stacks limited disk footprint limited processing capabilities page 3 android platform specifics prelinking speed up boot process save some space update script language complete vs incremental updates packaging manifest update package validation eg check sha 1 of file before patching page 4 dynamic linking & loading executable libc libm libssl libz libyyyy libwww libxxxx page 5 prelinking executable libc libm libssl libz libyyyy libwww libxxxx fixed locations page 6 our approach surgical changes minimize kernel impact preserve prelinking benefits some impact on footprint is unavoidable apply randomization during update reduces risk system files writeable almost as good as randomization at boot page 7 lifecycle of a patch compile link strip apriori prelink soslim strip ota_from_target_files sdcard update zip reboot in update mode verify current state apply patch reboot full vs incremental generate script add hashes sign page 8 a patch with aslr compile link strip apriori prelink soslim strip ota_from_target_files sdcard update zip reboot in update mode undo randomization verify current state apply patch randomize reboot full vs incremental generate script add hashes sign retouch prepare output relocations page 9 future work add complemetary protection non executable stack heap randomize loader base executables look at the whole platform login and user interaction application marketplace permissions java dalvik security of jit egwrt jit spraying
