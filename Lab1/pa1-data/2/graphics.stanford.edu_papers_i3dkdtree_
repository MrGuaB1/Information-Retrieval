interactive kd tree gpu raytracing interactive kd tree gpu raytracing daniel horn jeremy sugerman mike houston pat hanrahan to be presented at i3d 2007 abstract over the past few years the powerful computation rates and high memory bandwidth of gpus have attracted efforts to run raytracing on gpus our work extends foley et al s gpu kd tree research we port their kd restart algorithm from multi pass using cpu load balancing to single pass using current gpus branching and looping abilities we introduce three optimizations a packetized formulation a technique for restarting partially down the tree instead of at the root and a small fixed size stack that is checked before resorting to restart our optimized implementation achieves 15 18 million primary rays per second and 16 27 million shadow rays per second on our test scenes our system also takes advantage of gpus strengths at rasterization and shading to offer a mode where rasterization replaces eye ray scene intersection and primary hits and local shading are produced with standard direct3d code for 1024x1024 renderings of our scenes with shadows and phong shading we achieve 12 18 frames per second finally we investigate the efficiency of our implementation relative to the computational resources of our gpus and also compare it against conventional cpus and the cell processor which both have been shown to raytrace well paper adobe acrobat pdf 1.1 mb source code source zip 30 mb video windows media format wmv 47 mb presentation macintosh power point format 2.9 mb posted 5 17 2007
